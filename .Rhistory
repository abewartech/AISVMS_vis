lines(sort(buildingscoords[queryEmiratesHills, 5]), col = "red")
lines(sort(buildingscoords[queryEmiratesHills, 6]), col = "blue")
lines(sort(buildingscoords[queryEmiratesHills, 7]), col = "green")
lines(sort(buildingscoords[queryEmiratesHills, 8]), col = "darkred")
lines(sort(buildingscoords[queryEmiratesHills, 9]), col = "darkblue")
lines(sort(buildingscoords[queryEmiratesHills, 10]), col = "orange")
lines(sort(buildingscoords[queryEmiratesHills, 11]), col = "darkgreen")
### Remove 2% per year to Jumeirah Lakes Towers zone
rowsJumeirahLakesTowers <- nrow(buildingscoords[which(buildingscoords$zone == "Jumeirah Lakes Towers"), ])
queryJumeirahLakesTowers <- which(buildingscoords$zone == "Jumeirah Lakes Towers")
for(i in 1:7) {
buildingscoords[queryJumeirahLakesTowers, i + 4] <- buildingscoords[queryJumeirahLakesTowers, i + 3] + buildingscoords[queryJumeirahLakesTowers, i + 3] * rnorm(n = rowsJumeirahLakesTowers, mean = 4, sd = 0.33)/100
}
# Plot increment
plot(sort(buildingscoords[queryJumeirahLakesTowers, 4]), type = "l", ylab = "Prices", main = "Jumeirah Lakes Towers - 2% decrement anually", ylim = c(0, 150))
lines(sort(buildingscoords[queryJumeirahLakesTowers, 5]), col = "red")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 6]), col = "blue")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 7]), col = "green")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 8]), col = "darkred")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 9]), col = "darkblue")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 10]), col = "orange")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 11]), col = "darkgreen")
head(buildingscoords[,4])
head(buildingscoords)
centroides <- readShapePoints(fn = "/home/guzman/Documentos/Data-Submarine/DataSubmarine/Shapefiles Dubai/pointSamplingCentroidsOverDubaiZones", proj4string = CRS("+init=epsg:4326"))
# Keep Long, Lat and Zone
buildingscoords <- data.frame(centroides@coords, centroides@data)
# Change column names
colnames(buildingscoords) <- c("lon", "lat", "zone")
# Add random values per year
for(i in 2009:2016) {
buildingscoords <- cbind(buildingscoords, sample(x = seq(1, 100, 1), replace = TRUE, size = nrow(buildingscoords)))
}
colnames(buildingscoords) <- c("lon", "lat", "zone", "Year2009", "Year2010", "Year2011", "Year2012", "Year2013", "Year2014", "Year2015", "Year2016")
rowsEmiratesHills <- nrow(buildingscoords[which(buildingscoords$zone == "Emirates Hills"), ])
queryEmiratesHills <- which(buildingscoords$zone == "Emirates Hills")
for(i in 1:8) {
buildingscoords[queryEmiratesHills, i + 4] <- buildingscoords[queryEmiratesHills, i + 3] + buildingscoords[queryEmiratesHills, i + 3] * rnorm(n = rowsEmiratesHills, mean = 4, sd = 0.33)/100
}
plot(sort(buildingscoords[queryEmiratesHills, 4]), type = "l", ylab = "Prices", main = "Emirates Hill - 3 to 5% increment anually", ylim = c(0, 150))
lines(sort(buildingscoords[queryEmiratesHills, 5]), col = "red")
lines(sort(buildingscoords[queryEmiratesHills, 6]), col = "blue")
lines(sort(buildingscoords[queryEmiratesHills, 7]), col = "green")
lines(sort(buildingscoords[queryEmiratesHills, 8]), col = "darkred")
lines(sort(buildingscoords[queryEmiratesHills, 9]), col = "darkblue")
lines(sort(buildingscoords[queryEmiratesHills, 10]), col = "orange")
lines(sort(buildingscoords[queryEmiratesHills, 11]), col = "darkgreen")
lines(sort(buildingscoords[queryEmiratesHills, 12]), col = "cyan")
rowsJumeirahLakesTowers <- nrow(buildingscoords[which(buildingscoords$zone == "Jumeirah Lakes Towers"), ])
queryJumeirahLakesTowers <- which(buildingscoords$zone == "Jumeirah Lakes Towers")
for(i in 1:8) {
buildingscoords[queryJumeirahLakesTowers, i + 4] <- buildingscoords[queryJumeirahLakesTowers, i + 3] + buildingscoords[queryJumeirahLakesTowers, i + 3] * rnorm(n = rowsJumeirahLakesTowers, mean = 4, sd = 0.33)/100
}
plot(sort(buildingscoords[queryJumeirahLakesTowers, 4]), type = "l", ylab = "Prices", main = "Jumeirah Lakes Towers - 2% decrement anually", ylim = c(0, 150))
lines(sort(buildingscoords[queryJumeirahLakesTowers, 5]), col = "red")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 6]), col = "blue")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 7]), col = "green")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 8]), col = "darkred")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 9]), col = "darkblue")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 10]), col = "orange")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 11]), col = "darkgreen")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 12]), col = "cyan")
buildingscoords[, 5] - buildingscoords[, 4]
(buildingscoords[, 5] - buildingscoords[, 4] ) / 100
for(i in 1:8) {
rate <- (buildingscoords[, i + 4] - buildingscoords[, i + 3] ) / 100
buildingscoords <- cbind(buildingscoords, rate)
}
colnames(buildingscoords) <- c("lon", "lat", "zone", "Year2009", "Year2010", "Year2011", "Year2012", "Year2013", "Year2014", "Year2015", "Year2016", "Rate2010", "Rate2011", "Rate2012", "Rate2013", "Rate2014", "Rate2015", "Rate2016")
head(buildingscoords)
options(digits = 8)
# Load requiered libreries
library(maptools)
library(mapview)
# Load buildings centroids from shapefile
# centroides <- readShapePoints(fn = "/home/guzman/Documentos/Data-Submarine/DataSubmarine/Shapefiles Dubai/buildingsInDubai_centroids", proj4string = CRS("+init=epsg:4326"))
centroides <- readShapePoints(fn = "/home/guzman/Documentos/Data-Submarine/DataSubmarine/Shapefiles Dubai/pointSamplingCentroidsOverDubaiZones", proj4string = CRS("+init=epsg:4326"))
# Keep Long, Lat and Zone
buildingscoords <- data.frame(centroides@coords, centroides@data)
# Change column names
colnames(buildingscoords) <- c("lon", "lat", "zone")
# Add random values per year
for(i in 2009:2016) {
buildingscoords <- cbind(buildingscoords, sample(x = seq(1, 100, 1), replace = TRUE, size = nrow(buildingscoords)))
}
colnames(buildingscoords) <- c("lon", "lat", "zone", "Year2009", "Year2010", "Year2011", "Year2012", "Year2013", "Year2014", "Year2015", "Year2016")
### Add 3-5% per year to Emirates Hill zone
rowsEmiratesHills <- nrow(buildingscoords[which(buildingscoords$zone == "Emirates Hills"), ])
queryEmiratesHills <- which(buildingscoords$zone == "Emirates Hills")
for(i in 1:8) {
buildingscoords[queryEmiratesHills, i + 4] <- buildingscoords[queryEmiratesHills, i + 3] + buildingscoords[queryEmiratesHills, i + 3] * rnorm(n = rowsEmiratesHills, mean = 4, sd = 0.33)/100
}
# Plot increment
plot(sort(buildingscoords[queryEmiratesHills, 4]), type = "l", ylab = "Prices", main = "Emirates Hill - 3 to 5% increment anually", ylim = c(0, 150))
lines(sort(buildingscoords[queryEmiratesHills, 5]), col = "red")
lines(sort(buildingscoords[queryEmiratesHills, 6]), col = "blue")
lines(sort(buildingscoords[queryEmiratesHills, 7]), col = "green")
lines(sort(buildingscoords[queryEmiratesHills, 8]), col = "darkred")
lines(sort(buildingscoords[queryEmiratesHills, 9]), col = "darkblue")
lines(sort(buildingscoords[queryEmiratesHills, 10]), col = "orange")
lines(sort(buildingscoords[queryEmiratesHills, 11]), col = "darkgreen")
lines(sort(buildingscoords[queryEmiratesHills, 12]), col = "cyan")
### Remove 2% per year to Jumeirah Lakes Towers zone
rowsJumeirahLakesTowers <- nrow(buildingscoords[which(buildingscoords$zone == "Jumeirah Lakes Towers"), ])
queryJumeirahLakesTowers <- which(buildingscoords$zone == "Jumeirah Lakes Towers")
for(i in 1:8) {
buildingscoords[queryJumeirahLakesTowers, i + 4] <- buildingscoords[queryJumeirahLakesTowers, i + 3] + buildingscoords[queryJumeirahLakesTowers, i + 3] * rnorm(n = rowsJumeirahLakesTowers, mean = 4, sd = 0.33)/100
}
# Plot increment
plot(sort(buildingscoords[queryJumeirahLakesTowers, 4]), type = "l", ylab = "Prices", main = "Jumeirah Lakes Towers - 2% decrement anually", ylim = c(0, 150))
lines(sort(buildingscoords[queryJumeirahLakesTowers, 5]), col = "red")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 6]), col = "blue")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 7]), col = "green")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 8]), col = "darkred")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 9]), col = "darkblue")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 10]), col = "orange")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 11]), col = "darkgreen")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 12]), col = "cyan")
# Calculate increment per year in all the zones and add columns with this data
for(i in 1:7) {
rate <- (buildingscoords[, i + 4] - buildingscoords[, i + 3] ) / 100
buildingscoords <- cbind(buildingscoords, rate)
}
head(buildingscoords)
2009:2016
centroides <- readShapePoints(fn = "/home/guzman/Documentos/Data-Submarine/DataSubmarine/Shapefiles Dubai/pointSamplingCentroidsOverDubaiZones", proj4string = CRS("+init=epsg:4326"))
# Keep Long, Lat and Zone
buildingscoords <- data.frame(centroides@coords, centroides@data)
# Change column names
colnames(buildingscoords) <- c("lon", "lat", "zone")
# Add random values per year
for(i in 2009:2016) {
buildingscoords <- cbind(buildingscoords, sample(x = seq(1, 100, 1), replace = TRUE, size = nrow(buildingscoords)))
}
head(buildingscoords)
ncol(buildingscoords)
colnames(buildingscoords) <- c("lon", "lat", "zone", "Year2009", "Year2010", "Year2011", "Year2012", "Year2013", "Year2014", "Year2015", "Year2016")
ncol(buildingscoords)
head(buildingscoords)
for(i in 1:7) {
buildingscoords[queryEmiratesHills, i + 4] <- buildingscoords[queryEmiratesHills, i + 3] + buildingscoords[queryEmiratesHills, i + 3] * rnorm(n = rowsEmiratesHills, mean = 4, sd = 0.33)/100
}
head(buildingscoords)
plot(sort(buildingscoords[queryEmiratesHills, 4]), type = "l", ylab = "Prices", main = "Emirates Hill - 3 to 5% increment anually", ylim = c(0, 150))
lines(sort(buildingscoords[queryEmiratesHills, 5]), col = "red")
lines(sort(buildingscoords[queryEmiratesHills, 6]), col = "blue")
lines(sort(buildingscoords[queryEmiratesHills, 7]), col = "green")
lines(sort(buildingscoords[queryEmiratesHills, 8]), col = "darkred")
lines(sort(buildingscoords[queryEmiratesHills, 9]), col = "darkblue")
lines(sort(buildingscoords[queryEmiratesHills, 10]), col = "orange")
lines(sort(buildingscoords[queryEmiratesHills, 11]), col = "darkgreen")
lines(sort(buildingscoords[queryEmiratesHills, 12]), col = "cyan")
plot(sort(buildingscoords[queryEmiratesHills, 4]), type = "l", ylab = "Prices", main = "Emirates Hill - 3 to 5% increment anually", ylim = c(0, 150))
lines(sort(buildingscoords[queryEmiratesHills, 5]), col = "red")
lines(sort(buildingscoords[queryEmiratesHills, 6]), col = "blue")
lines(sort(buildingscoords[queryEmiratesHills, 7]), col = "green")
lines(sort(buildingscoords[queryEmiratesHills, 8]), col = "darkred")
lines(sort(buildingscoords[queryEmiratesHills, 9]), col = "darkblue")
lines(sort(buildingscoords[queryEmiratesHills, 10]), col = "orange")
lines(sort(buildingscoords[queryEmiratesHills, 11]), col = "darkgreen")
rowsJumeirahLakesTowers <- nrow(buildingscoords[which(buildingscoords$zone == "Jumeirah Lakes Towers"), ])
queryJumeirahLakesTowers <- which(buildingscoords$zone == "Jumeirah Lakes Towers")
for(i in 1:7) {
buildingscoords[queryJumeirahLakesTowers, i + 4] <- buildingscoords[queryJumeirahLakesTowers, i + 3] + buildingscoords[queryJumeirahLakesTowers, i + 3] * rnorm(n = rowsJumeirahLakesTowers, mean = 4, sd = 0.33)/100
}
for(i in 1:7) {
rate <- (buildingscoords[, i + 4] - buildingscoords[, i + 3] ) / 100
buildingscoords <- cbind(buildingscoords, rate)
}
colnames(buildingscoords)
head(buildingscoords)
colnames(buildingscoords) <- c("lon", "lat", "zone", "Year2009", "Year2010", "Year2011", "Year2012", "Year2013", "Year2014", "Year2015", "Year2016", "Rate2010", "Rate2011", "Rate2012", "Rate2013", "Rate2014", "Rate2015", "Rate2016")
head(buildingscoords)
write.table(x = buildingscoords, file = "/home/guzman/Documentos/GitHub/Data-Submarine/datasub-example-01/www/data/heatmapDataSimulatedExample.csv", row.names = FALSE, sep = ",")
shiny::runApp('Documentos/GitHub/Data-Submarine/datasub-example-01')
head(buildingscoords)
head(t(buildingscoords))
t(buildingscoords)
t(buildingscoords)[1]
t(buildingscoords)[2]
as.data.frame(t(buildingscoords))
head(as.data.frame(t(buildingscoords)))
library(reshape)
install.packages("reshape")
mdata <- melt(buildingscoords[, c(1:3,12:18)], id = c("Rate2010", "Rate2011", "Rate2012", "Rate2013", "Rate2014", "Rate2015", "Rate2016"))
library(reshape)
mdata <- melt(buildingscoords[, c(1:3,12:18)], id = c("Rate2010", "Rate2011", "Rate2012", "Rate2013", "Rate2014", "Rate2015", "Rate2016"))
head(mdata)
buildingscoords[, c(1:3,12:18)]
head(buildingscoords[, c(1:3,12:18)])
mdata <- melt(data = buildingscoords[, c(1:3,12:18)], d.vars = c("Rate2010", "Rate2011", "Rate2012", "Rate2013", "Rate2014", "Rate2015", "Rate2016"))
mdata <- melt(data = buildingscoords[, c(1:3,12:18)], id.vars = c("Rate2010", "Rate2011", "Rate2012", "Rate2013", "Rate2014", "Rate2015", "Rate2016"))
head(mdata)
mdata <- melt(data = buildingscoords[, c(1:3,12:18)], id = c("lon", "lat", "zone"))
head(mdata)
nrow(mdata)
nrow(buildingscoords)
write.table(x = mdata, file = "/home/guzman/Documentos/GitHub/Data-Submarine/datasub-example-01/www/data/heatmapDataSimulatedExample.csv", row.names = FALSE, sep = ",")
substring(text = mdata$variable, first = 4, last = 7)
mdata$variable <- substring(text = mdata$variable, first = 5, last = 8)
colnames(mdata) <- c("lon", "lat", "zone", "Rate", "value")
head(mdata)
mdata <- melt(data = buildingscoords[, c(1:3,12:18)], id = c("lon", "lat", "zone"))
mdata <- melt(data = buildingscoords[, c(1:3,12:18)], id = c("lon", "lat", "zone"))
mdata$variable <- as.numeric(substring(text = mdata$variable, first = 5, last = 8))
colnames(mdata) <- c("lon", "lat", "zone", "year", "rateValue")
write.table(x = mdata, file = "/home/guzman/Documentos/GitHub/Data-Submarine/datasub-example-01/www/data/heatmapDataSimulatedExample.csv", row.names = FALSE, sep = ",")
runApp('Documentos/GitHub/Data-Submarine/datasub-example-01')
sliderInput(inputId = "id", label = "LABEL", min = 0, max = 100, value = 50, step = 1, animate = TRUE)
runApp('Documentos/GitHub/Data-Submarine/datasub-example-01')
runApp('Documentos/GitHub/Data-Submarine/datasub-example-01')
head(mdata)
subset(x = df, year == year, select = c("lon", "lat", "rateValue"))
subset(x = mdata, year == 2010, select = c("lon", "lat", "rateValue"))
mdata <- melt(data = buildingscoords[, c(1:3,12:18)], id = c("lon", "lat", "zone"))
mdata$variable <- as.numeric(substring(text = mdata$variable, first = 5, last = 8))
colnames(mdata) <- c("lon", "lat", "zone", "year", "value")
write.table(x = mdata, file = "/home/guzman/Documentos/GitHub/Data-Submarine/datasub-example-01/www/data/heatmapDataSimulatedExample.csv", row.names = FALSE, sep = ",")
subset(x = mdata, year == 2010, select = c("lon", "lat", "rateValue"))
subset(x = mdata, year == 2010, select = c("lon", "lat", "value"))
dfSubset <- subset(x = mdata, year == 2010, select = c("lon", "lat", "value"))
j <- paste0("[",dfSubset[,"lat"], ",", dfSubset[,"lon"], ",", dfSubset[,"value"], "]", collapse = ",")
j
j <- paste0("[", dfSubset[, "lat"], ",", dfSubset[, "lon"], ",", dfSubset[, "value"], "]", collapse = ",")
j
j <- paste0("[", j, "]")
j
HTML(
paste(
"<script>",
sprintf("var buildingsCoords = %s;", j),
"buildingsCoords = buildingsCoords.map(function(p) {
return [p[0], p[1]];});
if(map.hasLayer(heat)) {
map.removeLayer(heat);
};
var heat = L.heatLayer(buildingsCoords, {minOpacity:", opacity,", radius:", radius, colorGradient, ", blur:", blur,"}).addTo(map);
</script>"
), sep = ""
)
runApp('Documentos/GitHub/Data-Submarine/datasub-example-01')
mdata <- melt(data = buildingscoords[, c(1:3,12:18)], id = c("lon", "lat", "zone"))
mdata$variable <- as.numeric(substring(text = mdata$variable, first = 5, last = 8))
colnames(mdata) <- c("lon", "lat", "zone", "year", "rateValue")
# Write table
# write.table(x = coordinatesBuildings, file = "/home/guzman/Documentos/Data-Submarine/DataSubmarine/datosBuildingsXYZ.csv", row.names = FALSE, sep = ",")
write.table(x = mdata, file = "/home/guzman/Documentos/GitHub/Data-Submarine/datasub-example-01/www/data/heatmapDataSimulatedExample.csv", row.names = FALSE, sep = ",")
shiny::runApp('Documentos/GitHub/Data-Submarine/datasub-example-01')
sliderInput(inputId = "id", label = "LABEL", min = 0, max = 100, value = 50, step = 1, animate = TRUE, post = "%")
sliderInput(inputId = "valueRate", label = "Rate value", min = -10, max = 10, dragRange = TRUE, value = 3, step = 1, animate = TRUE, post = "%")
sliderInput(inputId = "valueRate", label = "Rate value", min = -10, max = 10, dragRange = TRUE, value = 3, step = 1, post = "%")
runApp('Documentos/GitHub/Data-Submarine/datasub-example-01')
runApp('Documentos/GitHub/Data-Submarine/datasub-example-01')
runApp('Documentos/GitHub/Data-Submarine/datasub-example-01')
c(3,10)/100
runApp('Documentos/GitHub/Data-Submarine/datasub-example-01')
options(digits = 8)
# Load requiered libreries
library(maptools)
library(mapview)
library(reshape)
# Load buildings centroids from shapefile
# centroides <- readShapePoints(fn = "/home/guzman/Documentos/Data-Submarine/DataSubmarine/Shapefiles Dubai/buildingsInDubai_centroids", proj4string = CRS("+init=epsg:4326"))
centroides <- readShapePoints(fn = "/home/guzman/Documentos/Data-Submarine/DataSubmarine/Shapefiles Dubai/pointSamplingCentroidsOverDubaiZones", proj4string = CRS("+init=epsg:4326"))
# Keep Long, Lat and Zone
buildingscoords <- data.frame(centroides@coords, centroides@data)
# Change column names
colnames(buildingscoords) <- c("lon", "lat", "zone")
# Add random values per year
for(i in 2009:2016) {
buildingscoords <- cbind(buildingscoords, sample(x = seq(1, 100, 1), replace = TRUE, size = nrow(buildingscoords)))
}
colnames(buildingscoords) <- c("lon", "lat", "zone", "Year2009", "Year2010", "Year2011", "Year2012", "Year2013", "Year2014", "Year2015", "Year2016")
### Add 3-5% per year to Emirates Hill zone
rowsEmiratesHills <- nrow(buildingscoords[which(buildingscoords$zone == "Emirates Hills"), ])
queryEmiratesHills <- which(buildingscoords$zone == "Emirates Hills")
for(i in 1:7) {
buildingscoords[queryEmiratesHills, i + 4] <- buildingscoords[queryEmiratesHills, i + 3] + buildingscoords[queryEmiratesHills, i + 3] * rnorm(n = rowsEmiratesHills, mean = 4, sd = 0.33)/100
}
# Plot increment
plot(sort(buildingscoords[queryEmiratesHills, 4]), type = "l", ylab = "Prices", main = "Emirates Hill - 3 to 5% increment anually", ylim = c(0, 150))
lines(sort(buildingscoords[queryEmiratesHills, 5]), col = "red")
lines(sort(buildingscoords[queryEmiratesHills, 6]), col = "blue")
lines(sort(buildingscoords[queryEmiratesHills, 7]), col = "green")
lines(sort(buildingscoords[queryEmiratesHills, 8]), col = "darkred")
lines(sort(buildingscoords[queryEmiratesHills, 9]), col = "darkblue")
lines(sort(buildingscoords[queryEmiratesHills, 10]), col = "orange")
lines(sort(buildingscoords[queryEmiratesHills, 11]), col = "darkgreen")
### Remove 2% per year to Jumeirah Lakes Towers zone
rowsJumeirahLakesTowers <- nrow(buildingscoords[which(buildingscoords$zone == "Jumeirah Lakes Towers"), ])
queryJumeirahLakesTowers <- which(buildingscoords$zone == "Jumeirah Lakes Towers")
for(i in 1:7) {
buildingscoords[queryJumeirahLakesTowers, i + 4] <- buildingscoords[queryJumeirahLakesTowers, i + 3] - buildingscoords[queryJumeirahLakesTowers, i + 3] * rnorm(n = rowsJumeirahLakesTowers, mean = 4, sd = 0.33)/100
}
# Plot increment
plot(sort(buildingscoords[queryJumeirahLakesTowers, 4]), type = "l", ylab = "Prices", main = "Jumeirah Lakes Towers - 2% decrement anually", ylim = c(0, 150))
lines(sort(buildingscoords[queryJumeirahLakesTowers, 5]), col = "red")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 6]), col = "blue")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 7]), col = "green")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 8]), col = "darkred")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 9]), col = "darkblue")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 10]), col = "orange")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 11]), col = "darkgreen")
# Calculate increment per year in all the zones and add columns with this data
for(i in 1:7) {
rate <- (buildingscoords[, i + 4] - buildingscoords[, i + 3] ) / 100
buildingscoords <- cbind(buildingscoords, rate)
}
colnames(buildingscoords) <- c("lon", "lat", "zone", "Year2009", "Year2010", "Year2011", "Year2012", "Year2013", "Year2014", "Year2015", "Year2016", "Rate2010", "Rate2011", "Rate2012", "Rate2013", "Rate2014", "Rate2015", "Rate2016")
# Reshape data
mdata <- melt(data = buildingscoords[, c(1:3,12:18)], id = c("lon", "lat", "zone"))
mdata$variable <- as.numeric(substring(text = mdata$variable, first = 5, last = 8))
colnames(mdata) <- c("lon", "lat", "zone", "year", "rateValue")
# Write table
# write.table(x = coordinatesBuildings, file = "/home/guzman/Documentos/Data-Submarine/DataSubmarine/datosBuildingsXYZ.csv", row.names = FALSE, sep = ",")
write.table(x = mdata, file = "/home/guzman/Documentos/GitHub/Data-Submarine/datasub-example-01/www/data/heatmapDataSimulatedExample.csv", row.names = FALSE, sep = ",")
options(digits = 8)
# Load requiered libreries
library(maptools)
library(mapview)
library(reshape)
# Load buildings centroids from shapefile
# centroides <- readShapePoints(fn = "/home/guzman/Documentos/Data-Submarine/DataSubmarine/Shapefiles Dubai/buildingsInDubai_centroids", proj4string = CRS("+init=epsg:4326"))
centroides <- readShapePoints(fn = "/home/guzman/Documentos/Data-Submarine/DataSubmarine/Shapefiles Dubai/pointSamplingCentroidsOverDubaiZones", proj4string = CRS("+init=epsg:4326"))
# Keep Long, Lat and Zone
buildingscoords <- data.frame(centroides@coords, centroides@data)
# Change column names
colnames(buildingscoords) <- c("lon", "lat", "zone")
# Add random values per year
for(i in 2009:2016) {
buildingscoords <- cbind(buildingscoords, sample(x = seq(1, 100, 1), replace = TRUE, size = nrow(buildingscoords)))
}
colnames(buildingscoords) <- c("lon", "lat", "zone", "Year2009", "Year2010", "Year2011", "Year2012", "Year2013", "Year2014", "Year2015", "Year2016")
### Add 3-5% per year to Emirates Hill zone
rowsEmiratesHills <- nrow(buildingscoords[which(buildingscoords$zone == "Emirates Hills"), ])
queryEmiratesHills <- which(buildingscoords$zone == "Emirates Hills")
for(i in 1:7) {
buildingscoords[queryEmiratesHills, i + 4] <- buildingscoords[queryEmiratesHills, i + 3] + buildingscoords[queryEmiratesHills, i + 3] * rnorm(n = rowsEmiratesHills, mean = 4, sd = 0.33)/100
}
# Plot increment
plot(sort(buildingscoords[queryEmiratesHills, 4]), type = "l", ylab = "Prices", main = "Emirates Hill - 3 to 5% increment anually", ylim = c(0, 150))
lines(sort(buildingscoords[queryEmiratesHills, 5]), col = "red")
lines(sort(buildingscoords[queryEmiratesHills, 6]), col = "blue")
lines(sort(buildingscoords[queryEmiratesHills, 7]), col = "green")
lines(sort(buildingscoords[queryEmiratesHills, 8]), col = "darkred")
lines(sort(buildingscoords[queryEmiratesHills, 9]), col = "darkblue")
lines(sort(buildingscoords[queryEmiratesHills, 10]), col = "orange")
lines(sort(buildingscoords[queryEmiratesHills, 11]), col = "darkgreen")
### Remove 2% per year to Jumeirah Lakes Towers zone
rowsJumeirahLakesTowers <- nrow(buildingscoords[which(buildingscoords$zone == "Jumeirah Lakes Towers"), ])
queryJumeirahLakesTowers <- which(buildingscoords$zone == "Jumeirah Lakes Towers")
for(i in 1:7) {
buildingscoords[queryJumeirahLakesTowers, i + 4] <- buildingscoords[queryJumeirahLakesTowers, i + 3] - buildingscoords[queryJumeirahLakesTowers, i + 3] * rnorm(n = rowsJumeirahLakesTowers, mean = 4, sd = 0.33)/100
}
# Plot increment
plot(sort(buildingscoords[queryJumeirahLakesTowers, 4]), type = "l", ylab = "Prices", main = "Jumeirah Lakes Towers - 2% decrement anually", ylim = c(0, 150))
lines(sort(buildingscoords[queryJumeirahLakesTowers, 5]), col = "red")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 6]), col = "blue")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 7]), col = "green")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 8]), col = "darkred")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 9]), col = "darkblue")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 10]), col = "orange")
lines(sort(buildingscoords[queryJumeirahLakesTowers, 11]), col = "darkgreen")
# Calculate increment per year in all the zones and add columns with this data
for(i in 1:7) {
rate <- (buildingscoords[, i + 4] - buildingscoords[, i + 3] ) / 100
buildingscoords <- cbind(buildingscoords, rate)
}
colnames(buildingscoords) <- c("lon", "lat", "zone", "Year2009", "Year2010", "Year2011", "Year2012", "Year2013", "Year2014", "Year2015", "Year2016", "Rate2010", "Rate2011", "Rate2012", "Rate2013", "Rate2014", "Rate2015", "Rate2016")
# Reshape data
mdata <- melt(data = buildingscoords[, c(1:3,12:18)], id = c("lon", "lat", "zone"))
mdata$variable <- as.numeric(substring(text = mdata$variable, first = 5, last = 8))
colnames(mdata) <- c("lon", "lat", "zone", "year", "rateValue")
# Write table
# write.table(x = coordinatesBuildings, file = "/home/guzman/Documentos/Data-Submarine/DataSubmarine/datosBuildingsXYZ.csv", row.names = FALSE, sep = ",")
write.table(x = mdata, file = "/home/guzman/Documentos/GitHub/Data-Submarine/datasub-example-01/www/data/heatmapDataSimulatedExample.csv", row.names = FALSE, sep = ",")
buildingscoords[queryJumeirahLakesTowers, i + 3]
mdata[which(mdata$zone == "Jumeirah Lakes Towers"),]
buildingscoords[which(buildingscoords$zone == "Jumeirah Lakes Towers"),]
shiny::runApp('Documentos/GitHub/Data-Submarine/datasub-example-01')
runApp('Documentos/GitHub/Data-Submarine/datasub-example-01')
head(mdata)
buildingscoords[, c(1:3,12:18)]
head(buildingscoords[, c(1:3,12:18)])
head(mdata)
mdata(which(mdata$lon == 55.266302 & mdata$lat == 25.200168))
mdata[which(mdata$lon == 55.266302 & mdata$lat == 25.200168),]
mdata&year
mdata <- melt(data = buildingscoords[, c(1:3,12:18)], id = c("lon", "lat", "zone"))
mdata$variable <- as.numeric(substring(text = mdata$variable, first = 5, last = 8))
colnames(mdata) <- c("lon", "lat", "zone", "year", "rateValue")
class(mdata$year)
mdata[which(mdata$lon == 55.266302 & mdata$lat == 25.200168),]
mdata[which(mdata$lon == 55.266302),]
mdata[which(mdata$lon == 55.26630),]
mdata[which(mdata$lon == 55.2663),]
mdata[which(mdata$lon == 55.266),]
mdata[which(mdata$lon),]
mdata$lon
mdata[which(mdata$lon == mdata[1,1]),]
runApp('Documentos/GitHub/Data-Submarine/datasub-example-01')
subset(x = df, year == year & rateValue >= rate[1] & rateValue <= rate[2], select = c("lon", "lat", "rateValue"))
subset(x = df, year == 2010 & rateValue >= 0.2 & rateValue <= 0.5, select = c("lon", "lat", "rateValue"))
subset(x = mdata, year == 2010 & rateValue >= 0.2 & rateValue <= 0.5, select = c("lon", "lat", "rateValue"))
nrow(subset(x = mdata, year == 2010 & rateValue >= 0.2 & rateValue <= 0.5, select = c("lon", "lat", "rateValue")))
nrow(subset(x = mdata, year == 2011 & rateValue >= 0.2 & rateValue <= 0.5, select = c("lon", "lat", "rateValue")))
nrow(subset(x = mdata, year == 2012 & rateValue >= 0.2 & rateValue <= 0.5, select = c("lon", "lat", "rateValue")))
runApp('Documentos/GitHub/Data-Submarine/datasub-example-01')
nrow(subset(x = mdata, year == 2010 & rateValue >= 0.2 & rateValue <= 0.5, select = c("lon", "lat", "rateValue")))
nrow(subset(x = mdata, year == 2012 & rateValue >= 0.2 & rateValue <= 0.5, select = c("lon", "lat", "rateValue")))
runApp('Documentos/GitHub/Data-Submarine/datasub-example-01')
write.table(x = mdata, file = "/home/guzman/Documentos/GitHub/Data-Submarine/datasub-example-01/www/data/heatmapDataSimulatedExample.csv", row.names = FALSE, sep = ",")
runApp('Documentos/GitHub/Data-Submarine/datasub-example-01')
shiny::runGitHub(repo = 'datasub-example-01', username = 'Data-Submarine')
ais <- readRDS("/home/guzman/Documentos/GitHub/AISVMS_vis/data/aisData.rds")
class(ais$TIMESTAMP)
ais$TIMESTAMP
tiempo <- strptime(x = ais$TIMESTAMP, format = "%Y-%m-%d %H:%M:%S")
tiempo
class(tiempo)
ais$TIMESTAMP <- tiempo
saveRDS(object = ais, file = "/home/guzman/Documentos/GitHub/AISVMS_vis/data/aisData.rds")
shiny::runApp('Documentos/GitHub/AISVMS_vis')
runApp('Documentos/GitHub/AISVMS_vis')
runApp('Documentos/GitHub/AISVMS_vis')
runApp('Documentos/GitHub/AISVMS_vis')
shiny::runApp('Documentos/GitHub/AISVMS_vis')
runApp('Documentos/GitHub/AISVMS_vis')
mean(c(8,11,12,12,9,11,10,11))
sum(8,11,12,12,9,11,10,11)/8
mean(c(9,7,12,10,7,9,7))
-56.1888-180
180-56.1888
180-123
180-123
180-56.1888
180-123.8112
-180-34.9063
180-34.9063
180-145.0937
180-123.8112
shiny::runApp('Documentos/GitHub/AISVMS_vis')
uiOutput(outputId = "select")
setwd("~/Documentos/GitHub/AISVMS_vis")
ais <- readRDS("data/aisData.rds") # 1 million rows
colnames(ais)[1] <- c("MMSI")
ais <- subset(x = ais[1:100000,], select = c("LON", "LAT", "TIMESTAMP", "MMSI"))
ais$TIMESTAMP <- fastPOSIXct(x = ais$TIMESTAMP)
vesselNames <- unique(ais_df$MMSI)
vesselNames <- unique(ais$MMSI)
vesselNames
numberOfVessels <- length(vesselNames)
numberOfVessels
options <- list()
for(i in 1:numberOfVessels){
options[[i]] <- paste("<option value='", vesselNames[i], "' selected>", vesselNames[i], "</option>")
}
options
do.call("rbind", options)
options <- list()
for(i in 1:numberOfVessels){
options[[i]] <- paste("<option value='", vesselNames[i], "' selected>", vesselNames[i], "</option>", sep ="")
}
do.call("rbind", options)
options <- list()
for(i in 1:numberOfVessels){
options[[i]] <- paste("<option value='", vesselNames[i], "' selected> MMSI =", vesselNames[i], "</option>", sep ="")
}
options <- do.call("rbind", options)
options
options <- list()
for(i in 1:numberOfVessels){
options[[i]] <- paste("<option value='", vesselNames[i], "' selected> MMSI = ", vesselNames[i], "</option>", sep ="")
}
options <- do.call("rbind", options)
options
paste("<select multiple name='selectVesselName2'>",
"<option value='' disabled>Nombre del barco</option>",
options,
"</select>")
c("<select multiple name='selectVesselName2'>",
"<option value='' disabled>Nombre del barco</option>",
options,
"</select>")
HTML(c("<select multiple name='selectVesselName2'>",
"<option value='' disabled>Nombre del barco</option>",
options,
"</select>")
)
options <- list()
for(i in 1:numberOfVessels){
options[[i]] <- paste("<option value='", vesselNames[i], "'>", vesselNames[i], "</option>", sep ="")
}
options <- do.call("rbind", options)
select <- HTML(c("<select multiple name='selectVesselName2'>",
"<option value='' disabled>Nombre del barco</option>",
options,
"</select>")
)
select
runApp()
runApp()
vesselNames <- unique(ais_df$MMSI)[1:10]
vesselNames <- unique(ais$MMSI)[1:10]
vesselNames
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
