AnomalyDetectionTs(x = tempDf, max_anoms = 0.02, direction = 'both', plot = TRUE)
turbDf <- datosBoya[, c("timestamp", "Turb")]
turbDf
AnomalyDetectionTs(x = turbDf, max_anoms = 0.02, direction = 'both', plot = TRUE)
class(turbDf$timestamp)
class(raw_data$timestamp)
raw_data$timestamp[1]
turbDf$timestamp[]
turbDf$timestamp[1]
AnomalyDetectionTs(x = turbDf, max_anoms = 0.02, direction = 'both', plot = TRUE, verbose = TRUE)
AnomalyDetectionVec(x = turbDf[,2], max_anoms = 0.02, direction = 'both', plot = TRUE, verbose = TRUE)
AnomalyDetectionVec(turbDf, max_anoms = 0.1, direction = "pos", alpha = 0.05,
period = NULL, only_last = F, threshold = "None", e_value = F,
longterm_period = NULL, plot = F, y_log = F, xlabel = "",
ylabel = "count", title = NULL, verbose = FALSE)
AnomalyDetectionVec(turbDf[,2], max_anoms=0.02, period=1440, direction='both', plot=TRUE)
AnomalyDetectionVec(turbDf[,2], max_anoms=0.02, period=140, direction='both', plot=TRUE)
AnomalyDetectionVec(turbDf[,2], max_anoms=0.02, period=150, direction='both', plot=TRUE)
turbDf[1:20, ]
AnomalyDetectionVec(turbDf[,2], max_anoms=0.02, period=24, direction='both', plot=TRUE)
AnomalyDetectionVec(turbDf[,2], max_anoms = 0.03, period = 24, direction='both', plot=TRUE)
source('~/Documentos/R/Enlazar a Rscripts/anomalyDetection_example.R', echo=TRUE)
AnomalyDetectionVec(turbDf[,2], max_anoms = 0.05, period = 24, direction = 'both', plot = TRUE)
AnomalyDetectionVec(turbDf[,2], max_anoms = 0.03, period = 24, direction = 'both', plot = TRUE)
turbAD <- AnomalyDetectionVec(turbDf[,2], max_anoms = 0.03, period = 24, direction = 'both', plot = TRUE)
turbAD$anoms
turbAD$plot
turbAD <- AnomalyDetectionVec(turbDf[,2], max_anoms = 0.03, period = 24, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez")
tempAD <- AnomalyDetectionVec(tempDf[,2], max_anoms = 0.03, period = 24, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Temperatura", title = "Temperatura")
turbAD$plot
tempAD$plot
tempAD
AnomalyDetectionVec(tempDf[,2], max_anoms = 0.03, period = 24, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Temperatura", title = "Temperatura")
tempDf[,2]
AnomalyDetectionVec(tempDf[,2], max_anoms = 0.01, period = 24, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Temperatura", title = "Temperatura")
AnomalyDetectionVec(tempDf[,2], max_anoms = 0.001, period = 24, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Temperatura", title = "Temperatura")
AnomalyDetectionVec(tempDf[,2], period = 24, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Temperatura", title = "Temperatura")
AnomalyDetectionVec(turbDf[,2], max_anoms = 0.03, period = 24, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionVec(turbDf[,2], period = 24, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
turbAD$plot
turbAD$anoms
plot(turbDf[-(turbAD$anoms$index),])
plot(turbDf[-(turbAD$anoms$index),], type = "l")
turbAD
AnomalyDetectionTs(turbDf[,2], max_anoms = 0.03, period = 24, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionTs(turbDf[,2], max_anoms = 0.03, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionTs(turbDf, max_anoms = 0.03, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionTs(turbDf, max_anoms = 0.01, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionTs(turbDf, max_anoms = 0.001, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
nrow(turbDf)
1000/24
AnomalyDetectionTs(turbDf, max_anoms = 0.001, direction = 'both', longterm = TRUE, plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionTs(turbDf, max_anoms = 0.001, direction = 'both', longterm = TRUE, piecewise_median_period_weeks = 1, plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionTs(turbDf, max_anoms = 0.001, direction = 'both', longterm = TRUE, piecewise_median_period_weeks = 3, plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionTs(turbDf, max_anoms = 0.001, direction = 'both', longterm = TRUE, piecewise_median_period_weeks = 4, plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionTs(turbDf, max_anoms = 0.001, direction = 'both', longterm = TRUE, piecewise_median_period_weeks = 8, plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionTs(turbDf, max_anoms = 0.005, direction = 'both',  plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionTs(turbDf, max_anoms = 0.004, direction = 'both',  plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionTs(turbDf, max_anoms = 0.003, direction = 'both',  plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionTs(turbDf, max_anoms = 0.002, direction = 'both',  plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionVec(turbDf[,2], max_anoms = 0.03, period = 24, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionVec(turbDf[,2], max_anoms = 0.01, period = 24, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionVec(turbDf[,2], max_anoms = 0.1, period = 24, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionVec(turbDf[,2], max_anoms = 0.2, period = 24, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionVec(turbDf[,2], max_anoms = 0.3, period = 24, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionTs(turbDf, max_anoms = 0.3, direction = 'both',  plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionTs(turbDf,  plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
AnomalyDetectionTs(turbDf, max_anoms = 0.3, plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
turbAD <- AnomalyDetectionVec(turbDf[,2], max_anoms = 0.3, period = 24, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
turbAD <- AnomalyDetectionVec(turbDf[,2], max_anoms = 0.3, period = 24, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez", e_value = TRUE)
turbAD
plot(turbDf[-(turbAD$anoms$index),], type = "l")
View(datosBoya)
condDf <- datosBoya[, c("timestamp", "Cond")]
lines(CondDf[-(turbAD$anoms$index),], col = "blue")
lines(condDf[-(turbAD$anoms$index),], col = "blue")
plot(turbDf[-(turbAD$anoms$index),], type = "l")
plot(condDf[-(turbAD$anoms$index),], col = "blue", type = "l", add = TRUE)
plot(turbDf[-(turbAD$anoms$index),], type = "l")
par(new = TRUE)
plot(condDf[-(turbAD$anoms$index),], col = "blue", type = "l")
plot(turbDf[-(turbAD$anoms$index),], type = "l", lwd = 2)
par(new = TRUE)
plot(condDf[-(turbAD$anoms$index),], col = "blue", type = "l", lwd = 2)
turbAD <- AnomalyDetectionVec(turbDf[,2], max_anoms = 0.3, period = 24, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez", e_value = TRUE)
turbAD$plot
library("AnomalyDetection")
library("data.table")
library("ggplot2")
library("plotly")
datosBoya <- fread(input = "/home/guzman/Documentos/Shiny/Ema_datos_ejemplo.csv", sep = ",", header = TRUE, showProgress = TRUE, data.table = FALSE, stringsAsFactors = FALSE, verbose = TRUE)
# Formato datos
datosBoya$timestamp <- strptime(x = datosBoya$Fecha, format = "%m/%d/%Y %H:%M:%S")
tempDf <- datosBoya[, c("timestamp", "Temp")]
turbDf <- datosBoya[, c("timestamp", "Turb")]
condDf <- datosBoya[, c("timestamp", "Cond")]
# TURBIDEZ
turbAD <- AnomalyDetectionVec(turbDf[,2], max_anoms = 0.03, period = 24, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez")
turbAD <- AnomalyDetectionVec(turbDf[,2], max_anoms = 0.3, period = 24, direction = 'both', plot = TRUE, xlabel = "Tiempo (horas)", ylabel = "Turbidez", title = "Turbidez", e_value = TRUE)
turbAD$plot
turbAD
turbAD$anoms
head(turbAD$anoms)
data.frame(turbAD)
turbAD
data.frame(turbDf)
turbAD$anoms
head(turbAD$anoms)
turbAD_2 <- turbDf
turbAD_2[turbAD$anoms$index, turbAD$anoms$anoms]
turbAD_2$anoms <- NA
turbAD_2[turbAD$anoms$index, "anoms"]
turbAD$anoms$index
turbAD_2[turbAD$anoms$index, "anoms"]
turbAD_2[turbAD$anoms$index,]
turbAD_2[turbAD$anoms$index, "anoms"] <-  turbAD$anoms$anoms
turbAD_2$expected_value <- NA
turbAD_2$expected_value <- turbAD_2$Turb
turbAD_2[turbAD$anoms$index, "expected_value"] <-  turbAD$anoms$expected_value
head(turbAD_2)
turbGG <- ggplot(data = turbAD_2) + geom_point(aes(x = timestamp, y = expected_value))
turbGG
geom_line(aes(x = timestamp, y = expected_value))
turbGG <-
ggplot(data = turbAD_2) +
geom_point(aes(x = timestamp, y = expected_value)) +
geom_line(aes(x = timestamp, y = expected_value))
turbGG <-
ggplot(data = turbAD_2) +
geom_line(aes(x = timestamp, y = expected_value))
turbGG <-
ggplot(data = turbAD_2) +
geom_point(aes(x = timestamp, y = expected_value)) +
geom_line(aes(x = timestamp, y = expected_value))
turbGG
turbGG <-
ggplot(data = turbAD_2) +
geom_point(aes(x = timestamp, y = expected_value)) +
geom_line(aes(x = timestamp, y = expected_value)) +
geom_point(aes(x = timestamp, y = Turb, col = "brown")) +
geom_line(aes(x = timestamp, y = Turb, col = "brown"))
turbGG
turbGG <-
ggplot(data = turbAD_2) +
geom_point(aes(x = timestamp, y = Turb, col = "brown")) +
geom_line(aes(x = timestamp, y = Turb, col = "brown")) +
geom_point(aes(x = timestamp, y = expected_value)) +
geom_line(aes(x = timestamp, y = expected_value))
turbGG
ggplotly(turbGG)
geom_line(data = condDf, aes(x = timestamp, y = Cond))
turbGG <-
ggplot(data = turbAD_2) +
geom_point(aes(x = timestamp, y = Turb, col = "brown")) +
geom_line(aes(x = timestamp, y = Turb, col = "brown")) +
geom_point(aes(x = timestamp, y = expected_value)) +
geom_line(aes(x = timestamp, y = expected_value)) +
geom_line(data = condDf, aes(x = timestamp, y = Cond))
turbGG
condGG <- ggplot(data = condDf) + geom_line(, aes(x = timestamp, y = Cond, col = "blue"))
condGG <- ggplot(data = condDf) + geom_line(aes(x = timestamp, y = Cond, col = "blue"))
turbGG <-
ggplot(data = turbAD_2) +
geom_point(aes(x = timestamp, y = Turb, col = "brown")) +
geom_line(aes(x = timestamp, y = Turb, col = "brown")) +
geom_point(aes(x = timestamp, y = expected_value)) +
geom_line(aes(x = timestamp, y = expected_value))
ggplotly(turbGG + condGG)
turbGG + condGG
condGG <- geom_line(data = condDf, aes(x = timestamp, y = Cond, col = "blue"))
condGG
ggplotly(turbGG + condGG)
turbGG <-
ggplot(data = turbAD_2) +
#   geom_point(aes(x = timestamp, y = Turb, col = "brown")) +
#   geom_line(aes(x = timestamp, y = Turb, col = "brown")) +
geom_point(aes(x = timestamp, y = expected_value)) +
geom_line(aes(x = timestamp, y = expected_value))
condGG <- geom_line(data = condDf, aes(x = timestamp, y = Cond, col = "blue"))
ggplotly(turbGG + condGG)
turbGG <-
ggplot(data = turbAD_2) +
#   geom_point(aes(x = timestamp, y = Turb, col = "brown")) +
#   geom_line(aes(x = timestamp, y = Turb, col = "brown")) +
#   geom_point(aes(x = timestamp, y = expected_value)) +
geom_line(aes(x = timestamp, y = expected_value))
condGG <- geom_line(data = condDf, aes(x = timestamp, y = Cond, col = "blue"))
ggplotly(turbGG + condGG)
shiny::runApp('Documentos/DINARA/Proyectos/VMS/Code/VMS_vis')
library("ggplot2")
df <- data.frame(x = 1:10, y = 1:10, error1 = seq(0.5, 1, length.out = 10 ), error2 = seq(1, 1.5, length.out = 10 ))
j <- ggplot(df, aes(x = x, y = y, ymin = y - error1, ymax = y + error2))
j + geom_pointrange()
geom_errorbar()
j +
geom_pointrange() +
geom_errorbar()
interactiva <- j + geom_pointrange() + geom_errorbar()
library("plotly")
ggplotly(interactiva)
interactiva <- j + geom_errorbar() + geom_pointrange()
ggplotly(interactiva)
interactiva <- j + geom_pointrange()
ggplotly(interactiva)
interactiva
ggplotly(interactiva)
interactiva <- j + geom_errorbar()
ggplotly(interactiva)
df <- data.frame(x = 1:10, y = 1:10, error1 = seq(0.5, 5, length.out = 10 ), error2 = seq(1, 1.5, length.out = 10 ))
# ggplot
j <- ggplot(df, aes(x = x, y = y, ymin = y - error1, ymax = y + error2))
j +
geom_pointrange() +
geom_errorbar()
interactiva <- j + geom_errorbar()
shiny::runApp('Documentos/GitHub/AISVMS_vis')
library(shiny)
dateInput(inputId = "dateFrom", label = "Desde")
sliderInput(inputId = "radio", label = "RADIO", min = 0, max = 10, value = 5, step = 1, animate = TRUE)
dateInput(inputId = "dateFrom", label = "Desde")
shiny::runApp('Documentos/DINARA/Proyectos/VMS/Code/VMS_vis')
shiny::runApp('Documentos/GitHub/AISVMS_vis')
dateInput(inputId = "dateFrom", label = "Desde")
shiny::runApp('Documentos/GitHub/AISVMS_vis')
sliderInput(inputId = "radio", label = "RADIO", min = 0, max = 10, value = 5, step = 1, animate = TRUE)
sliderInput(inputId = "radio", label = "RADIO", min = 0, max = 10, value = 5, step = 1, animate = FALSE)
shiny::runApp('Documentos/GitHub/AISVMS_vis')
sliderInput(inputId = "radio", label = "RADIO", min = 0, max = 10, value = 5, step = 1, animate = FALSE)
shiny::runApp('Documentos/GitHub/AISVMS_vis')
sliderInput(inputId = "radio", label = "RADIO", min = 0, max = 10, value = 5, step = 1, animate = FALSE)
shiny::runApp('Documentos/GitHub/AISVMS_vis')
uiOutput(outputId = "a")
uiOutput("ui")
library(shiny)
uiOutput("ui")
shiny::runApp('Documentos/GitHub/AISVMS_vis')
renderText({
input$input_type
})
verbatimTextOutput("input_type_text")
shiny::runApp('Documentos/GitHub/AISVMS_vis')
textInput("dynamic", "Dynamic",
value = "starting value")
shiny::runApp('Documentos/GitHub/AISVMS_vis')
setwd("~/Documentos/GitHub/AISVMS_vis")
ais <- readRDS("data/aisData.rds")
class(ais$TIMESTAMP)
install.packages("dplyr", "jsonlite")
shiny::runGitHub("ballr", "toddwschneider")
shiny::runApp()
head(ais)
shiny::runApp()
install.packages("fasttime")
library("fasttime")
ais_df <- subset(x = ais[1:100000,], select = c("LON", "LAT", "TIMESTAMP"))
ais <- readRDS("data/aisData.rds")
ais_df <- subset(x = ais[1:100000,], select = c("LON", "LAT", "TIMESTAMP"))
fastPOSIXct(x = ais_df$TIMESTAMP)
ais_df$TIMESTAMP <- fastPOSIXct(x = ais_df$TIMESTAMP)
shiny::runApp()
ais_df$TIMESTAMP
ais_df <- subset(x = ais_df, subset = TIMESTAMP >= 2013-07-04, select = c("LON", "LAT", "TIMESTAMP"))
ais_df <- subset(x = ais[1:100000,], select = c("LON", "LAT", "TIMESTAMP"))
ais_df$TIMESTAMP <- fastPOSIXct(x = ais_df$TIMESTAMP)
ais_df_time <- subset(x = ais_df, subset = TIMESTAMP >= 2013-07-04, select = c("LON", "LAT", "TIMESTAMP"))
ais_df_time
nrow(ais_df_time)
nrow(ais_df)
ais_df_time <- subset(x = ais_df, subset = TIMESTAMP >= '2013-07-04', select = c("LON", "LAT", "TIMESTAMP"))
nrow(ais_df_time)
ais_df_time <- subset(x = ais_df, subset = TIMESTAMP >= '', select = c("LON", "LAT", "TIMESTAMP"))
min(ais_df$TIMESTAMP)
max(ais_df$TIMESTAMP)
library("shiny")
library("fasttime")
# Global data -------------------------------------------------------------
ais <- readRDS("data/aisData.rds") # 1 million rows
ais <- subset(x = ais[1:100000,], select = c("LON", "LAT", "TIMESTAMP"))
ais$TIMESTAMP <- fastPOSIXct(x = ais_df$TIMESTAMP)
# Initial values
dateFrom <- min(ais_df$TIMESTAMP)
dateUntil <- max(ais_df$TIMESTAMP)
dateFrom <- min(ais_df$TIMESTAMP)
dateUntil <- max(ais_df$TIMESTAMP)
dateFrom <- min(ais$TIMESTAMP)
dateUntil <- max(ais$TIMESTAMP)
switch(a, "a" = b <- "hola")
switch(a, a = b <- "hola")
switch(a, a = "hola")
a
a <- "a"
switch(a, a = b <- "hola")
b
rep(38000,4)
sized <- data.frame("Department" = c("HVAC", "PH", "Ele", "LV", "Man", "HVAC"), "Hours" = c(1281, 717, 854, 568, 462, 202), "SIZE" = rep(38000,6))
depChecked <- c("HVAC", "PH")
listQueriedDepts <- list()
for(i in 1:length(depChecked)){
listQueriedDepts[i] <- subset(x = sized, subset = Department == depChecked[i], select = c("Department", "Hours", "Size")
}
depChecked
listQueriedDepts
length(depChecked)
1:length(depChecked)
for(i in 1:length(depChecked)) {
listQueriedDepts[i] <- subset(x = sized, subset = Department == depChecked[i], select = c("Department", "Hours", "Size")
}
sized
subset(x = sized, subset = Department == depChecked[i], select = c("Department", "Hours", "Size")
listQueriedDepts <- list()
for(i in 1:length(depChecked)) {
listQueriedDepts[i] <- subset(x = sized, subset = Department == depChecked[i], select = c("Department", "Hours", "Size"))
}
listQueriedDepts
subset(x = sized, subset = Department == depChecked[1], select = c("Department", "Hours", "Size"))
sized
listQueriedDepts <- list()
for(i in 1:length(depChecked)) {
listQueriedDepts[i] <- subset(x = sized, subset = Department == depChecked[i], select = c("Department", "Hours", "SIZE"))
}
listQueriedDepts
subset(x = sized, subset = Department == depChecked[1], select = c("Department", "Hours", "SIZE"))
listQueriedDepts <- list()
for(i in 1:length(depChecked)) {
listQueriedDepts[[i]] <- subset(x = sized, subset = Department == depChecked[i], select = c("Department", "Hours", "SIZE"))
}
listQueriedDepts
n.obs <- sapply(listQueriedDepts, length)
seq.max <- seq_len(max(n.obs))
mat <- t(sapply(listQueriedDepts, "[", i = seq.max))
df <- as.data.frame(do.call('rbind', mat))
df
df3 <- rbind.fill(listQueriedDepts)
listQueriedDepts
df <- do.call("rbind", listQueriedDepts)
df
min(ais$TIMESTAMP)
max(ais$TIMESTAMP)
shiny::runApp()
subset(x = ais, subset = TIMESTAMP >= dateFromQuery && TIMESTAMP <= dateUntilQuery, select = c("LON", "LAT", "TIMESTAMP"))
subset(x = ais, subset = TIMESTAMP >= '2013-07-03' && TIMESTAMP <= '2013-07-03', select = c("LON", "LAT", "TIMESTAMP"))
subset(x = ais, subset = TIMESTAMP >= '2013-07-03' && TIMESTAMP <= '2013-07-04', select = c("LON", "LAT", "TIMESTAMP"))
shiny::runApp()
paste("perl -ane 'system(\"cat /auto/Sample_output/tmp.$F[0].vcf >> Sample_90061.vcf\");'",sep="")
paste("modelCheck(var\"",i,"_d.bug\")",sep="")
paste("modelCheck(var\"","i","_d.bug\")",sep="")
shiny::runApp()
setwd("~/Documentos/GitHub/AISVMS_vis")
ais <- readRDS("data/aisData.rds") # 1 million rows
colnames(ais)[1] <- c("MMSI")
ais <- subset(x = ais[1:100000,], select = c("LON", "LAT", "TIMESTAMP", "MMSI"))
ais$TIMESTAMP <- fastPOSIXct(x = ais$TIMESTAMP)
ais_df <- ais_df()
vesselNames <- unique(ais_df$MMSI)[1:10]
numberOfVessels <- length(vesselNames)
options <- list()
for(i in 1:numberOfVessels){
options[[i]] <- paste("<option value='", vesselNames[i], "'>", vesselNames[i], "</option>", sep = "")
}
options <- do.call("rbind", options)
select <- HTML(c("<select multiple name='selectVesselName2'>",
"<option value='' disabled>Nombre del barco</option>",
options,
"</select>")
)
select
options
ais_df <- ais
vesselNames <- unique(ais_df$MMSI)[1:10]
numberOfVessels <- length(vesselNames)
options <- list()
for(i in 1:numberOfVessels){
options[[i]] <- paste("<option value='", vesselNames[i], "'>", vesselNames[i], "</option>", sep = "")
}
options <- do.call("rbind", options)
select <- HTML(c("<select multiple name='selectVesselName2'>",
"<option value='' disabled>Nombre del barco</option>",
options,
"</select>")
)
select
return <- HTML(c("<script>$('#selectVesselName').html('", c("<select multiple name='selectVesselName2'>",
"<option value='' disabled>Nombre del barco</option>",
options,
"</select>"), "'); </script>"))
return
shiny::runApp()
select
shiny::runApp()
1:10 == 1:5
1:10 == c(1,5,8)
a <- 1:10
b <- c(1,5,8)
which(a == b)
a[1]
a[1] == b
a[2] == b
a[4] == b
a[5] == b
which(a[5] == b)
lista <- list()
for(i in 1:length(a)){
list[[i]] <- which(a[i] == b)
}
lista <- list()
for(i in 1:length(a)){
lista[[i]] <- which(a[i] == b)
}
lista
lista <- do.call("rbind", lista)
lista
a <- 1:10
b <- c(1,5,8)
lista <- list()
for(i in 1:length(a)){
lista[[i]] <- which(a[i] == b)
}
lista
is.null(lista)
is.null(lista[[]])
is.null(lista[])
sapply(lista, is.null)
lista
all(sapply(lista, is.null))
lista[[9]]
lista[[1]]
length(lista[[9]])
sapply(lista, length)
which(sapply(lista, length) > 0)
1 == 1:10
if(1 == 1:10){
print("hola")
}
1 == 1:10
4 == 1:10
encontrado <- FALSE
while(i in 1:10 && !encontrado) {
if(4 == a[i]){
encontrado <- TRUE
}
i++
}
encontrado <- FALSE
while(i in 1:10 && !encontrado) {
if(4 == a[i]) {
encontrado <- TRUE
}
encontrado <- FALSE
while(i in 1:10 && !encontrado) {
if(4 == a[i]) {
encontrado <- TRUE
} else {
i + 1
}
encontrado <- FALSE
while(i in 1:10 && !encontrado) {
if(4 == a[i]) {
encontrado <- TRUE
} else {
print(i)
}
encontrado <- FALSE
while(i in 1:10 & !encontrado) {
if(4 == a[i]) {
encontrado <- TRUE
} else {
print(i)
}
encontrado <- FALSE
while(i in 1:10 & !encontrado) {
if(4 == a[i]) {
encontrado <- TRUE
print("encontrado")
}
while(i in 1:10 & !encontrado)
!encontrado
encontrado <- FALSE
while(i in 1:10) {
if(4 == a[i]) {
encontrado <- TRUE
print("encontrado")
}
while(i in 1:10)
while(!encontrado)
{
if(4 == a[i]) {
encontrado <- TRUE
print("encontrado")
}
while(i < 10 & !encontrado)
{
if(4 == a[i]) {
encontrado <- TRUE
print("encontrado")
}
encontrado
encontrado <- FALSE
i <- 1
while(i < 10 & !encontrado) {
if(4 == a[i]) {
encontrado <- TRUE
}
encontrado <- FALSE
i <- 1
while(i < 10 & !encontrado) {
if(4 == a[i]) {
encontrado <- TRUE
}
i <- i + 1
}
encontrado
shiny::runApp()
